#include <iostream>
#include <boost/lexical_cast.hpp>
#include "boost/multi_array.hpp"


using namespace std;

#include <stdlib.h>
#include <assert.h>
#include <float.h>
#include <math.h>

#include <list>
#include <map>
#include <cassert>

#include "OpOtras.h"

#include "svm.h"



#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>


using namespace cv;

int main()
{
    // Data for visual representation
    int width = 512, height = 512;
    Mat image = Mat::zeros(height, width, CV_8UC3);

    // Set up training data
    float labels[4] = {1.0, -1.0, -1.0, -1.0};
    Mat labelsMat(4, 1, CV_32FC1, labels);

    float trainingData[4][2] = { {501, 10}, {255, 10}, {501, 255}, {10, 501} };
    Mat trainingDataMat(4, 2, CV_32FC1, trainingData);

    // Set up SVM's parameters
    CvSVMParams params;
    params.svm_type    = CvSVM::C_SVC;
    params.kernel_type = CvSVM::LINEAR;
    params.term_crit   = cvTermCriteria(CV_TERMCRIT_ITER, 100, 1e-6);

    // Train the SVM
    CvSVM SVM;
    SVM.train(trainingDataMat, labelsMat, Mat(), Mat(), params);

    Vec3b green(0,255,0), blue (255,0,0);
    // Show the decision regions given by the SVM
    for (int i = 0; i < image.rows; ++i)
        for (int j = 0; j < image.cols; ++j)
        {
            Mat sampleMat = (Mat_<float>(1,2) << i,j);
            float response = SVM.predict(sampleMat);

            if (response == 1)
                image.at<Vec3b>(j, i)  = green;
            else if (response == -1)
                 image.at<Vec3b>(j, i)  = blue;
        }

    // Show the training data
    int thickness = -1;
    int lineType = 8;
    circle( image, Point(501,  10), 5, Scalar(  0,   0,   0), thickness, lineType);
    circle( image, Point(255,  10), 5, Scalar(255, 255, 255), thickness, lineType);
    circle( image, Point(501, 255), 5, Scalar(255, 255, 255), thickness, lineType);
    circle( image, Point( 10, 501), 5, Scalar(255, 255, 255), thickness, lineType);

    // Show support vectors
    thickness = 2;
    lineType  = 8;
    int c     = SVM.get_support_vector_count();

    for (int i = 0; i < c; ++i)
    {
        const float* v = SVM.get_support_vector(i);
        circle( image,  Point( (int) v[0], (int) v[1]),   6,  Scalar(128, 128, 128), thickness, lineType);
    }

    imwrite("result.png", image);        // save the image

    imshow("SVM Simple Example", image); // show it to the user
    waitKey(0);

}



int main()
{
	//3 estados, 2 observac
	HMM hmm(3, 2);


	hmm.pi_init(1, 0.33333333);
	hmm.pi_init(2, 0.33333333);
	hmm.pi_init(3, 0.33333333);


	hmm.init(1, 1, 0.33333333);
	hmm.init(1, 2, 0.33333333);
	hmm.init(1, 3, 0.33333333);
	hmm.init(2, 1, 0.33333333);
	hmm.init(2, 2, 0.33333333);
	hmm.init(2, 3, 0.33333333);
	hmm.init(3, 1, 0.33333333);
	hmm.init(3, 2, 0.33333333);
	hmm.init(3, 3, 0.33333333);

	hmm.o_init(1, 'H', 0.5);
	hmm.o_init(2, 'H', 0.75);
	hmm.o_init(3, 'H', 0.25);
	hmm.o_init(1, 'T', 0.5);
	hmm.o_init(2, 'T', 0.25);
	hmm.o_init(3, 'T', 0.75);

	string training;
	string test;

	training = "HHHTTHT";
	test = "HHT";

	cout << "Probability (forward) " << hmm.alpha(training) << endl;

	cout << "Probability (backwards) " << hmm.beta(training) << endl;

	int *best_path = new int[256];
	cout << "Best path : " << hmm.viterbi(training, best_path) << "\n\n";

	hmm.maximize(training, test);

	cout << "Probability Forward: " << endl;
	cout << hmm.alpha(training);
	return 0;
}
